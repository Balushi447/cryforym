from flask import Flask, jsonify, request
import requests
import pandas as pd

app = Flask(__name__)

# CoinGecko API endpoint
COINGECKO_URL = "https://api.coingecko.com/api/v3"

def get_historical_data(coin_id, days=30):
    """Fetch historical price data for a cryptocurrency."""
    url = f"{COINGECKO_URL}/coins/{coin_id}/market_chart"
    params = {
        "vs_currency": "usd",
        "days": days
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def calculate_rsi(prices, period=14):
    """Calculate Relative Strength Index (RSI)."""
    delta = pd.Series(prices).diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.dropna().tolist()

@app.route('/api/data', methods=['GET'])
def get_data():
    coin_id = request.args.get('coin', 'dogecoin')  # Default to Dogecoin
    days = int(request.args.get('days', 30))        # Default to 30 days

    # Fetch historical data
    data = get_historical_data(coin_id, days)
    if not data:
        return jsonify({"error": "Failed to fetch data"}), 500

    prices = [x[1] for x in data['prices']]
    timestamps = [x[0] for x in data['prices']]

    # Calculate RSI
    rsi = calculate_rsi(prices)

    # Generate recommendation
    latest_rsi = rsi[-1]
    if latest_rsi < 30:
        recommendation = "Buy"
    elif latest_rsi > 70:
        recommendation = "Sell"
    else:
        recommendation = "Hold"

    return jsonify({
        "prices": prices,
        "timestamps": timestamps,
        "rsi": rsi,
        "recommendation": recommendation
    })

if __name__ == '__main__':
    app.run(debug=True)
def get_news(coin_id):
    """Fetch news related to a cryptocurrency."""
    url = "https://cryptopanic.com/api/v1/posts/"
    params = {
        "auth_token": "YOUR_CRYPTOPANIC_API_KEY",  # Replace with your API key
        "currencies": coin_id.upper(),
        "public": "true"
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json().get('results', [])
    else:
        return None

@app.route('/api/news', methods=['GET'])
def get_news_data():
    coin_id = request.args.get('coin', 'DOGE')  # Default to Dogecoin
    news = get_news(coin_id)
    if not news:
        return jsonify({"error": "Failed to fetch news"}), 500

    return jsonify(news)
